# CloudFormation Template for Serverless E-Commerce Platform

AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless E-Commerce Platform Infrastructure

Parameters:
  FrontendBucketName:
    Type: String
    Default: ecommerce-client-bucket
  BackendBucketName:
    Type: String
    Default: ecommerce-backend-bucket

Resources:

  ### S3 Bucket for React Frontend ###
  ReactS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  ### CloudFront Distribution ###
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: ReactOrigin
            DomainName: !GetAtt ReactS3Bucket.RegionalDomainName
            S3OriginConfig: {}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ReactOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
        DefaultRootObject: index.html

  ### DynamoDB Tables ###
  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CartTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Carts
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### Cognito User Pool ###
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: EcommerceUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: EcommerceAppClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*  
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ### S3 Bucket for Backend ###
  BackendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BackendBucketName

  ### Lambda Function (Express App) ###
  ExpressLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ExpressEcommerceBackend
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: BackendS3Bucket
        S3Key: output/deployment.zip
      Runtime: nodejs18.x
      Timeout: 10

  ### API Gateway ###
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: EcommerceAPI

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: products
      RestApiId: !Ref ApiGateway

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExpressLambdaFunction.Arn}/invocations

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExpressLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/products
